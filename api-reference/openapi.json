{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenAPI Plant Store",
    "description": "A sample API that uses a plant store as an example to demonstrate features in the OpenAPI specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.useinkless.com"
    }
  ],
  "security": [
    {
      "apiKeyAuth": []
    }
  ],
  "paths": {
    "/createFromTemplate": {
      "post": {
        "summary": "Create a message from a template (PDF with fields already added) that has been pre-created on Inkless. We recommend selecting 'Auto-release signatures when complete' when creating your template. When enabled, this setting automatically sends the final PDF with signatures once everyone has signed. If this is not enabled, you will need to manually review and release signatures even after everyone has signed.",
        "description": "Sends a message using a predefined template to one or more recipients. We recommend selecting 'Auto-release signatures when complete' when creating your template. When enabled, this setting automatically sends the final PDF with signatures once everyone has signed. If this is not enabled, you will need to manually review and release signatures even after everyone has signed.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["templateId", "recipients"],
                "properties": {
                  "templateId": {
                    "type": "string",
                    "description": "ID of the template to use"
                  },
                  "recipients": {
                    "type": "array",
                    "description": "List of recipient objects",
                    "items": {
                      "type": "object",
                      "required": ["email", "name"],
                      "properties": {
                        "email": {
                          "type": "string",
                          "format": "email",
                          "description": "Email address of the recipient"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name of the recipient"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created message from template",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response data",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Status message"
                    },
                    "pdf_id": {
                      "type": "string",
                      "description": "Identifier of the created PDF"
                    },
                    "recipients": {
                      "type": "array",
                      "description": "List of recipient email addresses",
                      "items": {
                        "type": "string",
                        "format": "email"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or missing parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (API key missing or invalid)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/registerWebhook": {
      "post": {
        "summary": "Register a webhook to receive notifications for specific events.",
        "description": "Allows your application to subscribe to events such as 'document.signed' by providing a URL where the webhook notifications should be sent.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterWebhookRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Webhook successfully registered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterWebhookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or missing required parameters (url, eventType).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (API key missing, invalid, or expired).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/deleteWebhook": {
      "post": {
        "summary": "Delete a previously registered webhook.",
        "description": "Removes a webhook registration based on the provided URL for the authenticated user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteWebhookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteWebhookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or missing required parameter (url).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (API key missing, invalid, or expired).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found or already deleted for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "webhooks": {
    "/webhook": {
      "post": {
        "description": "Information about a new event, such as when a recipient signs a PDF",
        "requestBody": {
          "description": "Event type and data related to the event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlant"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Plant": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "pdf_id": {
            "description": "The ID of the PDF",
            "type": "string"
          },
          "event_type": {
            "description": "Event type, such as document.signed",
            "type": "string"
          }
        }
      },
      "NewPlant": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Plant"
          },
          {
            "required": [],
            "type": "object",
            "properties": {
              "id": {
                "description": "ID of the event",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "Error": {
        "required": ["message"],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32",
            "description": "Error code (optional, added for consistency)"
          },
          "message": {
            "type": "string",
            "description": "A human-readable error message"
          }
        }
      },
      "RegisterWebhookRequest": {
        "type": "object",
        "required": ["url", "eventType"],
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL where webhook notifications will be sent."
          },
          "eventType": {
            "type": "string",
            "description": "The type of event to subscribe to (e.g., 'document.signed')."
          },
          "secret": {
            "type": "string",
            "description": "An optional secret to sign webhook payloads, allowing the recipient to verify the sender's authenticity.",
            "nullable": true
          }
        }
      },
      "RegisterWebhookResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A success message indicating the webhook was registered."
          },
          "webhook": {
            "type": "object",
            "description": "Details of the newly registered webhook.",
            "$ref": "#/components/schemas/WebhookRegistration"
          }
        }
      },
      "WebhookRegistration": {
        "type": "object",
        "required": ["webhook_id", "url", "eventType"],
        "properties": {
          "webhook_id": {
            "type": "string",
            "description": "The unique identifier of the registered webhook."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL where webhook notifications will be sent."
          },
          "eventType": {
            "type": "string",
            "description": "The type of event subscribed to."
          }
        }
      },
      "DeleteWebhookRequest": {
        "type": "object",
        "required": ["url"],
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL of the webhook to be deleted."
          }
        }
      },
      "DeleteWebhookResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A success message indicating the webhook was deleted."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL of the webhook that was deleted."
          }
        }
      }
    },
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    }
  }
}